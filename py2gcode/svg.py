# -*- coding: utf-8 -*-

from trajectory import *
from bezier import *

path_commands = ['m',  'c',  'l', 'M',  'C',  'L',  'z', 'Z'] #доступные команды


class SvgTrajectory(Trajectory):
    def __init__(self, str, x_off = None, y_off = None):
        super(SvgTrajectory,  self).__init__()
       
        self.commands = parse_full_svg(str)

        if x_off != None and self.commands[0]['com'] != 'M': #если есть смещение, то подменяем первую команду
            x, y = self.commands[0]['params'][0]
            self.commands[0]['params'][0] = (x + x_off, y + y_off)
            #self.commands[0]['params'] = [(x_off, y_off)] + self.commands[0]['params'][1:]
            #str = "m %(a)s,%(b)s" % {'a': x_off, 'b': y_off} + str[1:]
        self.points = []

    def __str__(self):
        res = ""
        for c in self.commands:
            res += c['com'] 
            for x, y in c['params']:
                res += " (%f,%f)" % (x, y)
            res += "\n"
        return res

    def create_trajectory(self):
        if len(self.points) > 0:
            return

        self.points = []        
        curr_x, curr_y = 0, 0
        begin = None #точку, куда будем замыкать траекторию
        #print self.commands
        for c in self.commands:
            path = []
            ok = False
            if c['com'] in ['m', 'M']:
                path, x, y = self.__move(c, curr_x, curr_y)            
                ok = True
            if begin == None: begin = (path[0]['x'], path[0]['y'])

            if c['com'] in ['l', 'L']:
                path, x, y = self.__line(c, curr_x, curr_y)
                ok = True

            if c['com'] in ['c', 'C']:
                path, x, y = self.__curve(c, curr_x, curr_y)
                ok = True

            if c['com'] in ['z', 'Z']:
                self.points.append({'x': begin[0], 'y': begin[1], 'jump': True})
                x = begin[0]
                y = begin[1]
                begin = None
                ok = True

            #if ok == False:
            #    print c

            curr_x = x
            curr_y = y
            self.points += path
        self.update_offsets()
        #print self.points

    def __curve(self, command, x, y):
        com = command['com']
        params = command['params']
        path = []
        cx, cy = x, y
        prev = (x, y)

        ts = [t/20.0 for t in range(21)]
        d = 3

        while len(params) >=3:
            #берем три точки кривой
            xys  = params[:3]
            #к каждой точке прибавляем абсолютное значение
            if com == 'c':
                xys = map(lambda (_x, _y): (_x + cx, _y + cy), xys)
            #в начало гладем абсолютное значение
            xys = [prev] + xys
            #генерим траеторию

            bezier = make_bezier(xys)
            points = bezier(ts)
            for xx, yy in points:
                path.append({'x': xx, 'y': yy})

            xx, yy = xys[3]
            prev = (xx, yy)
            #новые абсолютные значения
            cx = xx
            cy = yy
            params = params[3:]

        return path, cx, cy


    def __line(self, command, x, y):
        com = command['com']
        params = command['params']

        #тоже самое, что и move, только координата лишняя
        if com == 'L': #как будто движение, но с нуля
            return self.__move({'com': 'M', 'params': [(0, 0)] + params}, x, y)
        if com == 'l': #как будто движение, но с нуля
            return self.__move({'com': 'm', 'params': [(0, 0)] + params}, x, y)

    def __move(self, command, x, y):
        '''отрабатываем команду "m", возвращает список точек{x, y} в абсолютных координатах
        возвращает новые текущие координаты (x, y)'''
        com = command['com']
        params = command['params']
        (xx, yy) = params[0] #текущие координаты
        xx += x
        yy += y
        res = [{'x': xx, 'y': yy}]
        if len(params) == 1: #просто изменение текущих координат
            if com == 'm':
                return res, xx, yy
            else:
                xx, yy = params[0] 
                res = [{'x': xx, 'y': yy}]

        #дано несколько координат
        for p in params[1:]:
            if com == 'm':
                nx, ny = p
                xx += nx
                yy += ny
                res.append({'x': xx, 'y': yy})
                
            if com == 'M':
                nx, ny = p
                xx = nx
                yy = ny
                res.append({'x': xx, 'y': yy})
        return res, xx, yy        

    def command_to_coord(self):
        pass


def parse_params(params, x_off, y_off):
    'парсит строку параметров (координаты точек) в массив'
    vertex = params.split(' ') #разделили на вершины (они через пробел)
    #каждую вершину - на x и y
    res = []
    if x_off == None: x_off = 0
    if y_off == None: y_off = 0
    for v in vertex:
        if len(v) > 0:
            x, y = v.split(',')
            res.append((float(x) + x_off, -float(y) + y_off)) #ось Y тут в другую сторону
    return res

def parse_full_svg(str_svg_path, x_off = None, y_off = None):
    'разбивает строку на массив команд: {com, params}'
    res = []
    curr = ""
    curr_command = ""
    for s in str_svg_path:
        if s in path_commands: #встретилась команда
            if curr_command != "":    #если в данный момент проходили какую-то команду
                res.append({'com': curr_command,  'params': parse_params(curr.strip(), x_off, y_off)})    #сохраняем ее как результат
                curr = ""
            curr_command = s            #и переходим к новой
        else:
            curr += s
    if curr_command != "":
        res.append({'com': curr_command, 'params': parse_params(curr.strip(), x_off, y_off)}) #последнюю подстроку
        
    return res

if __name__ == '__main__':
    #str = "m 17,18 46,-110 103,31 44,154 z"
    str = "m 951.66568,44.84425 0.95215,0 3.50097,5.546875 0,-5.546875 0.90333,0 0,7.158203 -0.94727,0 -3.52051,-5.522461 0,5.522461 -0.88867,0 z m 6.01074,3.325195 c 0,-0.576167 0.16194,-1.035151 0.48584,-1.376953 0.32389,-0.341791 0.75276,-0.51269 1.28662,-0.512695 0.53059,5e-6 0.95458,0.175786 1.27198,0.527343 0.31737,0.351568 0.47606,0.8252 0.47607,1.420899 -10e-6,0.602217 -0.16358,1.079104 -0.49072,1.430664 -0.32716,0.351564 -0.75929,0.527345 -1.29639,0.527344 -0.46225,10e-7 -0.86671,-0.15869 -1.21338,-0.476075 -0.34669,-0.31738 -0.52002,-0.830888 -0.52002,-1.540527 z m 0.85449,0.0293 c 0,0.436201 0.0871,0.764977 0.26123,0.986328 0.17415,0.221357 0.38818,0.332034 0.64209,0.332031 0.23763,3e-6 0.4484,-0.106605 0.63233,-0.319824 0.18391,-0.213213 0.27587,-0.536292 0.27588,-0.969238 -10e-6,-0.455725 -0.0952,-0.785315 -0.28565,-0.98877 -0.19044,-0.203445 -0.39958,-0.30517 -0.62744,-0.305176 -0.24415,6e-6 -0.45492,0.1058 -0.63232,0.317383 -0.17742,0.211593 -0.26612,0.527348 -0.26612,0.947266 z m -0.76171,2.504883 3.32519,0 0,0.722656 -3.32519,0 z"
    f_1="m 90.401787,85.618324 6.445312,-3.144531 0.644532,0 0,22.363277 c -1.2e-5,1.48438 0.06184,2.40886 0.185546,2.77344 0.123686,0.36459 0.380847,0.64453 0.771485,0.83985 0.390612,0.19531 1.184882,0.30599 2.382808,0.33203 l 0,0.72265 -9.960933,0 0,-0.72265 c 1.249993,-0.026 2.057284,-0.13347 2.421875,-0.32227 0.364575,-0.1888 0.618481,-0.44271 0.761719,-0.76172 0.14322,-0.31901 0.214835,-1.27278 0.214843,-2.86133 l 0,-14.296871 c -8e-6,-1.927062 -0.06511,-3.16404 -0.195312,-3.710937 -0.09115,-0.416644 -0.25717,-0.722633 -0.498047,-0.917969 -0.240893,-0.195289 -0.530606,-0.292945 -0.869141,-0.292969 -0.481777,2.4e-5 -1.152349,0.201847 -2.011718,0.605469 z"
    f_2="m 124.05413,104.40739 -1.85547,5.09765 -15.625,0 0,-0.72265 c 4.59635,-4.19271 7.83202,-7.61718 9.70703,-10.273441 1.87499,-2.656236 2.81249,-5.084619 2.8125,-7.285156 -1e-5,-1.679668 -0.51433,-3.059874 -1.54297,-4.140625 -1.02865,-1.080706 -2.25912,-1.62107 -3.6914,-1.621094 -1.30209,2.4e-5 -2.47071,0.380883 -3.50586,1.142578 -1.03516,0.761741 -1.80013,1.878277 -2.29492,3.34961 l -0.72266,0 c 0.32552,-2.408832 1.16211,-4.257789 2.50977,-5.546875 1.34765,-1.289036 3.03059,-1.933567 5.04882,-1.933594 2.14843,2.7e-5 3.94205,0.690131 5.38086,2.070313 1.43879,1.380231 2.15819,3.007834 2.15821,4.882812 -2e-5,1.341165 -0.31252,2.682309 -0.9375,4.023438 -0.96356,2.109388 -2.52606,4.342459 -4.6875,6.699214 -3.2422,3.54168 -5.26694,5.67709 -6.07422,6.40625 l 6.91406,0 c 1.40624,1e-5 2.39256,-0.0521 2.95898,-0.15625 0.5664,-0.10416 1.07746,-0.31575 1.53321,-0.63476 0.45571,-0.31901 0.85285,-0.77148 1.1914,-1.35742 z"
    f_3="m 127.74554,88.059731 c 0.7552,-1.783831 1.70898,-3.160783 2.86132,-4.13086 1.15234,-0.970025 2.58789,-1.455051 4.30665,-1.455078 2.12238,2.7e-5 3.74998,0.690131 4.88281,2.070313 0.85936,1.028669 1.28905,2.128929 1.28906,3.300781 -10e-6,1.927103 -1.21095,3.919288 -3.63281,5.976562 1.62759,0.638036 2.85806,1.549494 3.6914,2.734375 0.83332,1.184908 1.24999,2.578136 1.25,4.179686 -1e-5,2.29167 -0.72918,4.27735 -2.1875,5.95703 -1.90105,2.1875 -4.65495,3.28125 -8.26171,3.28125 -1.78386,0 -2.99805,-0.22135 -3.64258,-0.66406 -0.64454,-0.44271 -0.9668,-0.91797 -0.9668,-1.42578 0,-0.3776 0.15299,-0.70963 0.45898,-0.99609 0.30599,-0.28646 0.67383,-0.42969 1.10352,-0.42969 0.32552,0 0.65755,0.0521 0.99609,0.15625 0.22135,0.0651 0.72266,0.30273 1.50391,0.71289 0.78124,0.41016 1.32161,0.6543 1.62109,0.73242 0.48177,0.14323 0.99609,0.21485 1.54297,0.21484 1.32812,1e-5 2.48372,-0.51432 3.4668,-1.54296 0.98306,-1.02865 1.4746,-2.24609 1.47461,-3.65235 -1e-5,-1.02864 -0.22788,-2.03124 -0.68359,-3.00781 -0.33856,-0.729157 -0.70965,-1.282542 -1.11329,-1.660157 -0.5599,-0.520822 -1.32813,-0.992826 -2.30468,-1.416016 -0.97657,-0.423164 -1.97267,-0.634752 -2.98828,-0.634765 l -0.625,0 0,-0.585938 c 1.02863,-0.130194 2.06053,-0.501288 3.0957,-1.113281 1.03514,-0.611964 1.7871,-1.34764 2.25586,-2.207031 0.46874,-0.859357 0.70311,-1.803367 0.70312,-2.832031 -1e-5,-1.341125 -0.41993,-2.425108 -1.25976,-3.251954 -0.83986,-0.826799 -1.88478,-1.24021 -3.13477,-1.240234 -2.01823,2.4e-5 -3.70443,1.080752 -5.05859,3.242188 z"
    f_sch = "m 152.13109,111.91016 0,-0.72266 c 0.0651,-0.013 0.30599,-0.0391 0.72265,-0.0781 1.00261,-0.0781 1.70247,-0.32552 2.09961,-0.74219 0.39713,-0.41667 0.5957,-1.51693 0.59571,-3.30078 l 0,-16.81641 c -1e-5,-1.705706 -0.2116,-2.7962 -0.63477,-3.271484 -0.42318,-0.475235 -1.35091,-0.751928 -2.7832,-0.830079 l 0,-0.722656 10.15625,0 0,0.722656 c -1.27605,0.130234 -2.09311,0.439479 -2.45117,0.927735 -0.35808,0.488305 -0.53712,1.546247 -0.53711,3.173828 l 0,16.81641 c -1e-5,1.34115 0.0488,2.19075 0.14648,2.54882 0.0977,0.35808 0.26041,0.5892 0.48828,0.69336 0.22786,0.10417 0.75195,0.15626 1.57227,0.15625 l 5.15625,0 c 1.30206,1e-5 2.07029,-0.10416 2.30469,-0.3125 0.23435,-0.20833 0.35154,-1.23697 0.35156,-3.08593 l 0,-16.81641 c -2e-5,-1.588518 -0.1758,-2.636694 -0.52735,-3.144531 -0.35158,-0.507787 -1.1784,-0.826798 -2.48046,-0.957032 l 0,-0.722656 9.74609,0 0,0.722656 c -1.28909,0.130234 -2.1094,0.445989 -2.46094,0.947266 -0.35158,0.501327 -0.52736,1.552758 -0.52734,3.154297 l 0,16.81641 c -2e-5,1.71875 0.11065,2.71484 0.33203,2.98828 0.22133,0.27344 1.06117,0.41016 2.51953,0.41015 l 5.25391,0 c 0.71611,1e-5 1.18486,-0.0618 1.40625,-0.18554 0.22132,-0.1237 0.36129,-0.30925 0.41992,-0.55664 0.0586,-0.2474 0.0879,-1.13281 0.0879,-2.65625 l 0,-16.81641 c -3e-5,-1.61456 -0.17907,-2.669247 -0.53711,-3.164063 -0.3581,-0.494766 -1.18167,-0.807266 -2.4707,-0.9375 l 0,-0.722656 10.11718,0 0,0.722656 c -0.96358,0.02607 -1.68949,0.169297 -2.17773,0.429688 -0.48832,0.260442 -0.80733,0.62828 -0.95703,1.103516 -0.14978,0.475284 -0.22465,1.331403 -0.22461,2.568359 l 0,16.81641 c -4e-5,1.36719 0.0586,2.23958 0.17578,2.61718 0.11715,0.37761 0.37106,0.71941 0.76172,1.02539 0.39059,0.30599 1.21741,0.4655 2.48047,0.47852 l 0,8.33984 -0.66406,0 c -0.54692,-2.17448 -1.23702,-3.79232 -2.07032,-4.85351 -0.83337,-1.0612 -1.80993,-1.78711 -2.92968,-2.17774 -1.11983,-0.39062 -2.76045,-0.58593 -4.92188,-0.58593 z"

    f_p = "m 12.082768,24.076054 5.507813,-2.226563 0.742187,0 0,4.179688 c 0.924472,-1.575505 1.852206,-2.67902 2.783204,-3.310547 0.930979,-0.631493 1.910796,-0.947247 2.939453,-0.947266 1.796861,1.9e-5 3.294255,0.703143 4.492187,2.109375 1.471336,1.718765 2.207013,3.958346 2.207031,6.71875 -1.8e-5,3.085944 -0.885434,5.638025 -2.65625,7.65625 -1.458347,1.653646 -3.294283,2.480468 -5.507812,2.480469 -0.963551,-10e-7 -1.796884,-0.136719 -2.5,-0.410156 -0.520841,-0.195313 -1.106778,-0.585937 -1.757813,-1.171875 l 0,5.449218 c -6e-6,1.223953 0.07486,2.001947 0.22461,2.333985 0.149733,0.332024 0.410149,0.595696 0.78125,0.791015 0.371086,0.195305 1.044913,0.292961 2.021484,0.292969 l 0,0.722656 -9.375,0 0,-0.722656 0.488281,0 c 0.716145,0.01301 1.328124,-0.123706 1.835938,-0.410156 0.247393,-0.143237 0.43945,-0.374356 0.576172,-0.69336 0.136716,-0.319016 0.205075,-1.129562 0.205078,-2.43164 l 0,-16.914063 c -3e-6,-1.15884 -0.05209,-1.894516 -0.15625,-2.207031 -0.104169,-0.312485 -0.270185,-0.54686 -0.498047,-0.703125 -0.227867,-0.156234 -0.537111,-0.234359 -0.927734,-0.234375 -0.312501,1.6e-5 -0.709636,0.09116 -1.191407,0.273438 z m 6.25,3.105468 0,6.679688 c -6e-6,1.445317 0.05859,2.395837 0.175782,2.851562 0.182285,0.755211 0.628248,1.419273 1.33789,1.992188 0.709627,0.572917 1.604809,0.859375 2.685547,0.859375 1.302072,0 2.356758,-0.507811 3.164063,-1.523438 1.054673,-1.328121 1.582016,-3.196609 1.582031,-5.605468 -1.5e-5,-2.734365 -0.598973,-4.837227 -1.796875,-6.308594 -0.833346,-1.01561 -1.822928,-1.523422 -2.96875,-1.523438 -0.62501,1.6e-5 -1.243499,0.156266 -1.855469,0.46875 -0.468758,0.23439 -1.243497,0.937515 -2.324219,2.109375 z"

    '''
    _1 = SvgTrajectory(f_1)
    _1.jump_point(5, [6, 55])
    _2 = SvgTrajectory(f_2)
    _2.jump_point(5, [10, 63])
    _3 = SvgTrajectory(f_3)
    _3.jump_point(5, [10, 45])
    _sch = SvgTrajectory(f_sch)
    _sch.jump_point(5, [14, 41, 68, 93])'''

    _p = SvgTrajectory(str)
    _p.to_zero()
    #_p.jump_point(5, [14, 41, 68, 93])
    preview2D([_p], 8)

    def one(f):
        x,  y =  f.get_first_position()
        G0(x, y)

        z = -3

        while z>-5:
            f.to_gcode(z,  -3.5)
            z -= 0.5
        G0(Z = 3)

    def f():
        F(300)
        G0(0, 0, 5)
        F(1000)

        one(_p)

        G0(Z=5)

    preview(f)
